/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Notebook
 */
public class ManagerChatter extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form ManagerChatter
     */
    private ServerSocket srvSocket = null;
    private ServerSocket srvSocketFile = null;
    private BufferedReader br = null;
    private Thread t;
    private int serverPort;
    private int portFile;
    public ManagerChatter() {
        initComponents();
        this.setSize(600, 300);
        serverPort = Integer.parseInt(txtServerPort.getText());
        try {
            srvSocket = new ServerSocket(serverPort);
            srvSocketFile = new ServerSocket(serverPort + 1);
            portFile = srvSocketFile.getLocalPort();
            this.lbMessage.setText("Mng. Server is running at the port");
        } catch (Exception e) {
            e.printStackTrace();
        }
        t = new Thread(this);
        t.start();
        pack();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    @Override
    public void run() {
        while (true) {
            try {
                Socket aStaffSocket = srvSocket.accept();
                Socket socketFile = srvSocketFile.accept();
                if (aStaffSocket != null) {
                    br = new BufferedReader(new InputStreamReader(aStaffSocket.getInputStream()));
                    String S = br.readLine();
                    int pos = S.indexOf(":");
                    String staffName = S.substring(pos + 1);
                    ChatPanel p = new ChatPanel(aStaffSocket, "Manager", staffName);
                    JPanel container = new JPanel();
                    container.add(p);
                    container.setLayout(new BoxLayout(container, BoxLayout.Y_AXIS));
                    jTabbedPane1.add(staffName, container);
                    p.scrollToLastLine();
                    p.updateUI();
                    pack();
                }
                if (socketFile != null) {
                    BufferedInputStream in = new BufferedInputStream(socketFile.getInputStream());
                    try (DataInputStream d = new DataInputStream(in)) {
                        String fileName = d.readUTF();
                        //get file name only! (not all path) (filename)
                        File userFile = new File(fileName);
                        String filename = userFile.getName();
                        //end
                        //choose directory + filename
                        String dirf = "F://" + filename;
                        File file = new File(dirf);
                        //end
                        int r = JOptionPane.showConfirmDialog(null, "Do you want to save " + filename + " in F://?");
                        if (r == JOptionPane.YES_OPTION) {
                            if (checkDuplicate(dirf) == true) {
                                int c = JOptionPane.showConfirmDialog(null, "This file is already existed in this directory. Do you want to replace it?");
                                if (c == JOptionPane.YES_OPTION) {
                                    File tmp = new File(dirf);
                                    tmp.delete();
                                    Files.copy(d, file.toPath());
                                }
                            } else {
                                Files.copy(d, file.toPath());
                            }
                        }
                    }
                }
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public boolean checkDuplicate(String fileName) {
        File f = new File(fileName);
        if (f.exists()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbMessage = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        lbMessage.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbMessage.setText("Manager Port:");
        jPanel1.add(lbMessage);

        txtServerPort.setText("12340");
        jPanel1.add(txtServerPort);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerChatter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbMessage;
    private javax.swing.JTextField txtServerPort;
    // End of variables declaration//GEN-END:variables
}
